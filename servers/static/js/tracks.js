window.App = window.App || {};
(function($, Backbone, _, L, App)
 {
   var tracksView = Backbone.View.extend({
     el: $("#tracks-list"),
     events: {
       "click li": "onTrackClick"
     },
     initialize: function(options) {
       // set the collection and call render
       this.collection = options['collection'];
       this.template = _.template($("#tracks-template").html());
       this.listenTo(App.Router, "route", this.initTrack);
       this.render();
     },
     render: function() {
       _.each(this.collection.models, function(val, key) {
         $(this.el).append(this.template(val.toJSON()));
       }, this);

       var routeFragment = Backbone.history.getFragment();
       if(routeFragment.split('/')[1]) {
         this.initTrack();
       }
     },
     onTrackClick: function(event) {
       var routeFragment = "#/track/"+$(event.currentTarget).attr('id');
       App.Router.navigate(routeFragment, {trigger: true});
     },
     initTrack: function(){
       if(App.map.hasLayer(App.addedTrack)) {
         App.map.removeLayer(App.addedTrack);
       }
       
       /*if(event){
         var obj = this.collection.where({'id': $(event.currentTarget).attr('id')});
       } else {
         var obj = this.collection.where({'id': Backbone.history.getFragment().split('/')[1]});
       }*/
       var obj = this.collection.where({'id': Backbone.history.getFragment().split('/')[1]});
       
       var track = obj[0].get('track');
       // if there is no attribute called track, then generate the track
       // and then push it to the server to be stored.
       // track can be generated by using the gpx file.
       var that = this;
       if(!(track)) {
         $.ajax({url: obj[0].get('track-path')}).done(function(data) {
           // load the geoJSON on the map
           var jsonTrack = '';
           if(typeof data == "string") {
             jsonTrack = toGeoJSON.gpx(
               (new DOMParser()).parseFromString(data, 'text/xml'));
           }
           else  {
             jsonTrack = toGeoJSON.gpx(data);
           }
           that.loadTrack(jsonTrack, obj[0]);
           // send the json to be cached on server
           // TODO: Add a error handler
           $.ajax({
             url: '/track/' + obj[0].get('id'),
             type: 'POST',
             data: {'track': JSON.stringify(jsonTrack)},
             success: function(data) {
               console.log("GeoJSON stored");
             }
           });
         });
       }
       else {
         this.loadTrack(track, obj[0]);
       }
   },
   loadTrack: function(track, obj) {
       // the track gets visualized on the map.
       coords = [];
       App.addedTrack = L.geoJson(track, {
         style: function(feature) {
           return {
		color: 'red',
		};
   },
	 pointToLayer: function(feature,latlng){
           switch(feature.properties.name) {
           case 'Picture':
		return L.marker(latlng, {icon:App.pictureIcon});
	   case 'Voice recording':
		return L.marker(latlng,{icon:audioIcon});
	   default:
		return L.marker(latlng,{icon:textIcon});
           }		
	 },
  onEachFeature: function(feature, layer) {
     switch(feature.properties.name) {
     case 'Picture':
       layer.bindPopup("<img class='img-responsive' src=" + obj.get('data-path') + '/' +
                       feature.properties.link + "/>");
       break;
     case 'Voice recording':
       layer.bindPopup("<audio controls='controls' src=" + obj.get('data-path')+ '/' +
                       feature.properties.link + ".mp3" + "/>");
       break;
     default:
       layer.bindPopup(feature.properties.name);
       break;
     }
     coords.push([feature.geometry.coordinates[1],feature.geometry.coordinates[0]]);
  },
	getLatLng: function (coords) {
            return new L.heatLayer(coords);
        }
       }).addTo(App.map);
       App.map.fitBounds(App.addedTrack.getBounds());
     }
   });

   // A backbone collection to represent set of tracks stored on the server.
   App.Tracks = Backbone.Collection.extend({
     model: Backbone.Model,
     initialize: function(models) {
       this.add(models);
       this.set({'view': new tracksView({'collection': this})});
     }
   });


   var router = Backbone.Router.extend({
     routes: {
         "track/:id": "loadTrack"  
     }
   });

   App.Router = new router();
   Backbone.history.start();
 }
)(window.jQuery, window.Backbone, window._, window.L, window.App);
